name: Pipeline

on:
  push:
    branches: [dev]
    paths-ignore: ["**/README.md"]
  pull_request:
    branches: [dev]
    paths-ignore: ["**/README.md"]
    types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - run: python -m pip install flake8 pylint
      - run: |
          flake8 .
          pylint src

  tests_and_coverage:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #    run test suite and output coverage file
      #----------------------------------------------
      - name: Test with pytest
        run: ./scripts/coverage-container.sh
      #----------------------------------------------
      #    setup files
      #----------------------------------------------
      - run: sudo mv ./docker/cov/coverage.xml ./coverage.xml && sudo rm -rf ./docker
      #----------------------------------------------
      #             upload coverage stats
      # (requires CODECOV_TOKEN in repository secrets)
      #----------------------------------------------
  deploy_container:
    needs: [linting, tests_and_coverage]
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: "https://rostov-songs-dev.herokuapp.com/docs"
    steps:
      - uses: actions/checkout@v2
      - name: "Copy and rename dockerfile" # workaround
        run: |
          chmod +x ./scripts/cp-root.sh
          ./scripts/cp-root.sh
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        env:
          HD_API_KEY: ${{secrets.DEV_API_KEY}}
          HD_POSTGRES_URL: ${{secrets.DEV_POSTGRES_URL}}
        with:
          heroku_api_key: ${{secrets.DEV_HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.DEV_HEROKU_APP_NAME}}
          heroku_email: ${{secrets.DEV_HEROKU_EMAIL}}
          usedocker: true
          # healthcheck: "https://${{secrets.HEROKU_APP_NAME}}.herokuapp.com/"
          # rollbackonhealthcheckfailed: true
          # delay: 1.5
          # healthcheck delay in seconds
          #Â check might occur before the app is ready
          # either wait for healthcheck or remove healthcheck
